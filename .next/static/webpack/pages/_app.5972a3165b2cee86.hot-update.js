"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/apiCall.js":
/*!****************************!*\
  !*** ./context/apiCall.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiCallProvider: function() { return /* binding */ ApiCallProvider; },\n/* harmony export */   useApiCall: function() { return /* binding */ useApiCall; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/supabase */ \"./utils/supabase.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/constants */ \"./utils/constants.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/helper */ \"./utils/helper.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\nconst ApiCallContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst useApiCall = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ApiCallContext);\n};\n_s(useApiCall, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ApiCallProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    const [mainData, setMainData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        topCompanyProfile: {\n            data: [],\n            isLoading: true\n        },\n        allCompanyProfile: {\n            data: [],\n            isLoading: true\n        },\n        topJobPost: {\n            data: [],\n            isLoading: true\n        },\n        allJobPost: {\n            data: [],\n            isLoading: true\n        },\n        allChannel: {\n            data: [],\n            isLoading: true\n        },\n        user: {\n            data: null,\n            isLoading: true\n        },\n        profile: {\n            data: null,\n            isLoading: true\n        },\n        notification: {\n            data: [],\n            isLoading: true\n        },\n        jobPost: {\n            data: [],\n            isLoading: true\n        },\n        companyProfile: {\n            data: [],\n            isLoading: true\n        },\n        resume: {\n            data: [],\n            isLoading: true\n        },\n        application: {\n            data: [],\n            isLoading: true\n        }\n    });\n    const resetData = ()=>{\n        setMainData({\n            ...mainData,\n            user: {\n                data: null,\n                isLoading: true\n            },\n            profile: {\n                data: null,\n                isLoading: true\n            },\n            notification: {\n                data: [],\n                isLoading: true\n            },\n            jobPost: {\n                data: [],\n                isLoading: true\n            },\n            companyProfile: {\n                data: [],\n                isLoading: true\n            },\n            resume: {\n                data: [],\n                isLoading: true\n            },\n            application: {\n                data: [],\n                isLoading: true\n            }\n        });\n    };\n    const getUserApi = async ()=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.getUser();\n            if (error) {\n                throw error;\n            }\n            if (data === null || data === void 0 ? void 0 : data.user) {\n                setMainData((prevData)=>({\n                        ...prevData,\n                        user: {\n                            data: data === null || data === void 0 ? void 0 : data.user,\n                            isLoading: false\n                        }\n                    }));\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    const getProfileApi = async ()=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"profile\").select().single().eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id);\n            setMainData((prevData)=>({\n                    ...prevData,\n                    profile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    const updateProfileApi = async (param)=>{\n        let { postData } = param;\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"profile\").update({\n                username: postData.username,\n                full_name: postData.full_name\n            }).eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).select().single();\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    profile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Updated!\");\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const updateOnboardingApi = async (param)=>{\n        let { postData } = param;\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"profile\").update({\n                onboarding: postData.onboarding\n            }).eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).select().single();\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    profile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const updateAccountTypeApi = async (param)=>{\n        let { postData } = param;\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"profile\").update({\n                account_type: postData.accountType\n            }).eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).select().single();\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    profile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const updateProductTourApi = async (param)=>{\n        let { postData } = param;\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"profile\").update({\n                product_tour: postData.productTour\n            }).eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).select().single();\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    profile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getNotificationApi = async ()=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"notification\").select(\"*\").eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).order(\"id\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    notification: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const addNotificationApi = async (postData)=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"notification\").insert({\n                ...postData,\n                user_uuid: (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id\n            }).select().single();\n            if (error) {\n                throw error;\n            }\n            if (data) {\n                mainData.notification.data.unshift(data);\n            }\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const updateNotificationApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"notification\").update({\n                is_read: true\n            }).eq(\"id\", postData === null || postData === void 0 ? void 0 : postData.id).select().single();\n            if (error) {\n                throw error;\n            }\n            const currentNotifications = mainData.notification.data;\n            if (currentNotifications.length !== 0) {\n                const indexToReplace = currentNotifications.findIndex((obj)=>obj.id === data.id);\n                const newNotifications = [\n                    ...currentNotifications.slice(0, indexToReplace),\n                    data,\n                    ...currentNotifications.slice(indexToReplace + 1)\n                ];\n                setMainData((prevData)=>({\n                        ...prevData,\n                        notification: {\n                            data: newNotifications,\n                            isLoading: false\n                        }\n                    }));\n            }\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getJobPostApi = async ()=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").select(\"*, job_post_validity (*), application (*, resume (*)), job_post_channel_post (*)\").eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).order(\"id\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    jobPost: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const addJobPostApi = async (postData)=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").insert({\n                ...postData,\n                user_uuid: (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id\n            }).select().single();\n            if (error) {\n                throw error;\n            }\n            if (data) {\n                mainData.jobPost.data.unshift(data);\n            }\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const editJobPostApi = async (param)=>{\n        let { postData, id } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").update({\n                ...postData\n            }).eq(\"id\", id).select(\"*, job_post_validity (*), application (*, resume (*)), job_post_channel_post (*)\").single();\n            const currentData = mainData.jobPost.data;\n            const indexToReplace = currentData.findIndex((obj)=>obj.id === data.id);\n            const newData = [\n                ...currentData.slice(0, indexToReplace),\n                data,\n                ...currentData.slice(indexToReplace + 1)\n            ];\n            setMainData((prevData)=>({\n                    ...prevData,\n                    jobPost: {\n                        data: newData,\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const deleteJobPostApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").delete().eq(\"id\", postData.id).select().single();\n            if (error) {\n                throw error;\n            }\n            if (data) {\n                const currentJobs = mainData.jobPost.data;\n                const newJobs = currentJobs.filter((job)=>job.id !== data.id);\n                setMainData((prevData)=>({\n                        ...prevData,\n                        jobPost: {\n                            data: newJobs,\n                            isLoading: false\n                        }\n                    }));\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Deleted!\");\n                return data;\n            }\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const publishJobPostApi = async (postData)=>{\n        try {\n            const response = await fetch(\"/api/job-post/publish\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(postData)\n            });\n            if (response.ok) {\n                const responseData = await response.json();\n                if (responseData) {\n                    const currentData = mainData.jobPost.data;\n                    const returnData = responseData.data;\n                    function findAndReplace(data, returnData) {\n                        for(let i = 0; i < data.length; i++){\n                            if (data[i].job_post_validity && data[i].job_post_validity.id === returnData.id) {\n                                data[i].job_post_validity = returnData;\n                                break;\n                            }\n                        }\n                        return data;\n                    }\n                    const newData = findAndReplace(currentData, returnData);\n                    setMainData((prevData)=>({\n                            ...prevData,\n                            jobPost: {\n                                data: newData,\n                                isLoading: false\n                            }\n                        }));\n                    return responseData;\n                }\n            } else {\n                const error = await response.json();\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n            }\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"An error occurred while processing the request\");\n        }\n    };\n    const addChannelPostApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post_channel_post\").insert(postData.channel_post) // bulk insert (array)\n            .select();\n            if (error) {\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const deleteChannelPostApi = async (postData)=>{\n        try {\n            const idsToDelete = postData.channel_post.map((item)=>item.id);\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post_channel_post\").delete().eq(\"id\", idsToDelete); // bulk delete (array)\n            if (error) {\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getResumeApi = async ()=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"resume\").select(\"*\").eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id);\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    resume: {\n                        data: data.length > 0 ? data[0] : [],\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            console.error(error);\n        }\n    };\n    const addResumeApi = async (param)=>{\n        let { postData } = param;\n        try {\n            var _mainData_user_data;\n            let dataToUpdate = {\n                ...postData,\n                user_uuid: (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id\n            };\n            if (!postData.uid) {\n                dataToUpdate.uid = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_6__.generateUniqueID)();\n            }\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"resume\").upsert(dataToUpdate, {\n                onConflict: \"user_uuid\"\n            }).select();\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    resume: {\n                        data: data.length > 0 ? data[0] : [],\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getCompanyProfileApi = async ()=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").select(\"*\").eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id).order(\"id\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    companyProfile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const addCompanyProfileApi = async (postData)=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").insert({\n                ...postData,\n                uid: (0,_utils_helper__WEBPACK_IMPORTED_MODULE_6__.generateUniqueID)(),\n                user_uuid: (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id\n            }).select().single();\n            if (error) {\n                throw error;\n            }\n            if (data) {\n                mainData.companyProfile.data.unshift(data);\n            }\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const editCompanyProfileApi = async (param)=>{\n        let { postData, id } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").update({\n                ...postData\n            }).eq(\"id\", id).select().single();\n            if (error) {\n                throw error;\n            }\n            const currentData = mainData.companyProfile.data;\n            const indexToReplace = currentData.findIndex((obj)=>obj.id === data.id);\n            const newData = [\n                ...currentData.slice(0, indexToReplace),\n                data,\n                ...currentData.slice(indexToReplace + 1)\n            ];\n            setMainData((prevData)=>({\n                    ...prevData,\n                    companyProfile: {\n                        data: newData,\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const deleteCompanyProfileApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").delete().eq(\"id\", postData.id).select().single();\n            if (error) {\n                throw error;\n            }\n            if (data) {\n                const currentData = mainData.companyProfile.data;\n                const newData = currentData.filter((item)=>item.id !== data.id);\n                setMainData((prevData)=>({\n                        ...prevData,\n                        companyProfile: {\n                            data: newData,\n                            isLoading: false\n                        }\n                    }));\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Deleted!\");\n                return data;\n            }\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getApplicationApi = async ()=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"application\").select(\"*, job_post (*, company_profile (*))\").eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id);\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    application: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const applyJobPostApi = async (param)=>{\n        let { postData } = param;\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"application\").select(\"*, job_post (*, company_profile (*))\").eq(\"job_post_id\", postData.job_post_id).eq(\"user_uuid\", (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id);\n            if (error) {\n                throw error;\n            }\n            if (data.length == 0) {\n                var _mainData_user_data1;\n                const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"application\").insert({\n                    ...postData,\n                    user_uuid: (_mainData_user_data1 = mainData.user.data) === null || _mainData_user_data1 === void 0 ? void 0 : _mainData_user_data1.id\n                }).select().single();\n                if (error) {\n                    throw error;\n                }\n                if (data) {\n                    mainData.application.data.unshift(data);\n                }\n                return data;\n            }\n            if (data.length > 0) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Application already submitted!\");\n            }\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const editApplicationApi = async (param)=>{\n        let { postData, id } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"application\").update({\n                ...postData\n            }).eq(\"id\", id).select();\n            if (error) {\n                throw error;\n            }\n            return data.length > 0 ? data[0] : [];\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getTopJobPostApi = async (param)=>{\n        let { limit: limit } = param;\n        setMainData((prevData)=>({\n                ...prevData,\n                topJobPost: {\n                    ...prevData.topJobPost,\n                    isLoading: true\n                }\n            }));\n        try {\n            let query = _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").select(\"*, job_post_validity!inner(*), company_profile (*)\").eq(\"job_post_validity.is_published\", true).order(\"id\", {\n                ascending: false\n            });\n            if (limit) {\n                query = query.limit(limit);\n            }\n            const { data, error } = await query;\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    topJobPost: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n            setMainData((prevData)=>({\n                    ...prevData,\n                    topJobPost: {\n                        ...prevData.topJobPost,\n                        isLoading: false\n                    }\n                }));\n        }\n    };\n    const getAllJobPostApi = async (param)=>{\n        let { jobFilter: jobFilter, from: from, to: to } = param;\n        setMainData((prevData)=>({\n                ...prevData,\n                allJobPost: {\n                    ...prevData.allJobPost,\n                    isLoading: true\n                }\n            }));\n        try {\n            let query = _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").select(\"*, job_post_validity!inner(*), company_profile (*)\").eq(\"job_post_validity.is_published\", true).range(from, to).order(\"id\", {\n                ascending: false\n            });\n            if (jobFilter === null || jobFilter === void 0 ? void 0 : jobFilter.keyword) {\n                query = query.textSearch(\"summary\", jobFilter.keyword, {\n                    type: \"websearch\",\n                    config: \"english\"\n                });\n            }\n            if (jobFilter === null || jobFilter === void 0 ? void 0 : jobFilter.type) {\n                query = query.eq(\"employment_type\", jobFilter.type);\n            }\n            if (jobFilter === null || jobFilter === void 0 ? void 0 : jobFilter.minSalary) {\n                query = query.gte(\"min_salary\", jobFilter.minSalary);\n            }\n            if (jobFilter === null || jobFilter === void 0 ? void 0 : jobFilter.maxSalary) {\n                query = query.lte(\"max_salary\", jobFilter.maxSalary);\n            }\n            const { data, error } = await query;\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    allJobPost: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n            setMainData((prevData)=>({\n                    ...prevData,\n                    allJobPost: {\n                        ...prevData.allJobPost,\n                        isLoading: false\n                    }\n                }));\n        }\n    };\n    const getJobDetailsApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"job_post\").select(\"*, job_post_validity!inner(*), company_profile (*)\").eq(\"job_post_validity.is_published\", true).eq(\"uid\", postData.job_uid);\n            if (error) {\n                throw error;\n            }\n            return data.length > 0 ? data[0] : [];\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getResumeDetailsApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"resume\").select(\"*, profile (username)\").eq(\"uid\", postData.uid);\n            if (error) {\n                throw error;\n            }\n            return data.length > 0 ? data[0] : null;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getSingleCompanyProfileApi = async (postData)=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").select(\"*, job_post(*,  job_post_validity!inner(*), company_profile (*))\").eq(\"uid\", postData.uid).eq(\"job_post.job_post_validity.is_published\", true);\n            if (error) {\n                throw error;\n            }\n            return data.length > 0 ? data[0] : null;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const updatePasswordApi = async (param)=>{\n        let { postData } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.updateUser({\n                password: postData.new_password\n            });\n            if (error) {\n                throw error;\n            }\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Password changed!\");\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const deleteAccountApi = async (postData)=>{\n        try {\n            var _mainData_user_data;\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"account_deletion\").insert({\n                ...postData,\n                user_uuid: (_mainData_user_data = mainData.user.data) === null || _mainData_user_data === void 0 ? void 0 : _mainData_user_data.id\n            }).select();\n            if (error) {\n                throw error;\n            }\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Account deleted!\");\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getAllChannelApi = async ()=>{\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"channel\").select(\"*\").eq(\"is_active\", true).order(\"id\", {\n                ascending: true\n            });\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    allChannel: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const getTopCompanyApi = async (param)=>{\n        let { limit: limit } = param;\n        setMainData((prevData)=>({\n                ...prevData,\n                topCompanyProfile: {\n                    ...prevData.topCompanyProfile,\n                    isLoading: true\n                }\n            }));\n        try {\n            let query = _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").select(\"*, job_post (*)\").order(\"id\", {\n                ascending: false\n            });\n            if (limit) {\n                query = query.limit(limit);\n            }\n            const { data, error } = await query;\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    topCompanyProfile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n            setMainData((prevData)=>({\n                    ...prevData,\n                    topCompanyProfile: {\n                        ...prevData.topCompanyProfile,\n                        isLoading: false\n                    }\n                }));\n        }\n    };\n    const getAllCompanyApi = async (limit)=>{\n        try {\n            let query = _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"company_profile\").select(\"*, job_post (*)\").order(\"id\", {\n                ascending: false\n            });\n            if (limit) {\n                query = query.limit(limit);\n            }\n            const { data, error } = await query;\n            if (error) {\n                throw error;\n            }\n            setMainData((prevData)=>({\n                    ...prevData,\n                    allCompanyProfile: {\n                        data: data,\n                        isLoading: false\n                    }\n                }));\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const promiseAllApi = async ()=>{\n        await Promise.all([\n            getProfileApi(),\n            getNotificationApi(),\n            getJobPostApi(),\n            getResumeApi(),\n            getCompanyProfileApi(),\n            getApplicationApi()\n        ]);\n    };\n    const promiseAllPublicApi = async ()=>{\n        await Promise.all([\n            getTopJobPostApi({\n                limit: 3\n            }),\n            getTopCompanyApi({\n                limit: 3\n            }),\n            getAllCompanyApi(),\n            getAllChannelApi()\n        ]);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const innitialFetch = async ()=>{\n            if (mainData.user.data == null) {\n                const userData = await getUserApi();\n                if (!userData) {\n                    console.log(\"Please login\");\n                }\n            }\n        };\n        innitialFetch();\n    }, [\n        router.pathname\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        promiseAllPublicApi();\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (mainData.user.data !== null) {\n            promiseAllApi();\n        }\n    }, [\n        mainData.user.data\n    ]);\n    const loginApi = async (param)=>{\n        let { email, password } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.signInWithPassword({\n                email: email,\n                password: password\n            });\n            if (error) {\n                if (error.message === \"Email not confirmed\") {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"Your email confirmation is pending, please check your inbox for the confirmation link.\");\n                } else {\n                    throw error;\n                }\n            }\n            return data === null || data === void 0 ? void 0 : data.user;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const signUpApi = async (param)=>{\n        let { username, email, password } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.signUp({\n                email: email,\n                password: password,\n                options: {\n                    emailRedirectTo: \"https://gikijo/dashboard\",\n                    data: {\n                        name: username\n                    }\n                }\n            });\n            if (error) {\n                throw error;\n            }\n            if (data.user && data.user.identities && data.user.identities.length === 0) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(\"User already exists!\");\n                return;\n            }\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Thanks for signing up! please check your email to complete your registration.\", {\n                duration: 6000\n            });\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const resetPasswordApi = async (param)=>{\n        let { currentEmail } = param;\n        try {\n            const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.resetPasswordForEmail(currentEmail, {\n                redirectTo: \"https://gikijo/changePassword\"\n            });\n            if (error) {\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        }\n    };\n    const logoutApi = async ()=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.signOut();\n        if (error) {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error(error.message);\n        } else {\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"You have been logged out.\");\n            router.push(_utils_constants__WEBPACK_IMPORTED_MODULE_5__.PAGES.home.directory);\n            resetData();\n        }\n    };\n    const clearData = async ()=>{\n        router.push(_utils_constants__WEBPACK_IMPORTED_MODULE_5__.PAGES.home.directory);\n        resetData();\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ApiCallContext.Provider, {\n        value: {\n            apiData: mainData,\n            clearData,\n            loginApi,\n            signUpApi,\n            resetPasswordApi,\n            logoutApi,\n            getTopJobPostApi,\n            getTopCompanyApi,\n            getAllJobPostApi,\n            getProfileApi,\n            addNotificationApi,\n            updateNotificationApi,\n            getJobPostApi,\n            addJobPostApi,\n            editJobPostApi,\n            deleteJobPostApi,\n            publishJobPostApi,\n            applyJobPostApi,\n            addChannelPostApi,\n            deleteChannelPostApi,\n            getCompanyProfileApi,\n            addCompanyProfileApi,\n            editCompanyProfileApi,\n            deleteCompanyProfileApi,\n            editApplicationApi,\n            getJobDetailsApi,\n            getResumeDetailsApi,\n            getSingleCompanyProfileApi,\n            updatePasswordApi,\n            deleteAccountApi,\n            getResumeApi,\n            addResumeApi,\n            setMainData,\n            updateProfileApi,\n            updateAccountTypeApi,\n            updateOnboardingApi,\n            updateProductTourApi,\n            getApplicationApi\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/hafizhizers/Documents/GitHub/gikijo_v2_fork/context/apiCall.js\",\n        lineNumber: 1249,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ApiCallProvider, \"0mNo7KHPK0ZijLHgKecsepC/IoI=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter\n    ];\n});\n_c = ApiCallProvider;\nvar _c;\n$RefreshReg$(_c, \"ApiCallProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBUztZQUNoQ25KO1FBQ0Y7SUFDRjtJQUVBLE1BQU1vSixZQUFZO1FBQ2hCckssT0FBT2tLLElBQUksQ0FBQ3hLLG1EQUFLQSxDQUFDeUssSUFBSSxDQUFDQyxTQUFTO1FBQ2hDbko7SUFDRjtJQUVBLHFCQUNFLDhEQUFDckIsZUFBZTBLLFFBQVE7UUFDdEJDLE9BQU87WUFDTEMsU0FBU3ZLO1lBQ1RvSztZQUNBdkI7WUFDQUc7WUFDQVU7WUFDQUs7WUFDQXJEO1lBQ0F5QjtZQUNBdEI7WUFDQXRGO1lBQ0F3QjtZQUNBSTtZQUNBUztZQUNBQztZQUNBQztZQUNBRztZQUNBTTtZQUNBZ0M7WUFDQWpCO1lBQ0FFO1lBQ0FVO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FJO1lBQ0FnQjtZQUNBRTtZQUNBQztZQUNBQztZQUNBSTtZQUNBckM7WUFDQUM7WUFDQTVGO1lBQ0E0QjtZQUNBUztZQUNBRjtZQUNBSztZQUNBNkQ7UUFDRjtrQkFFQ3hHOzs7Ozs7QUFHUCxFQUFFO0lBandDV0Q7O1FBQ0lMLGtEQUFTQTs7O0tBRGJLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbnRleHQvYXBpQ2FsbC5qcz82MGQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0b2FzdCBmcm9tICdyZWFjdC1ob3QtdG9hc3QnO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tICcuLi91dGlscy9zdXBhYmFzZSc7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcic7XG5pbXBvcnQgeyBQQUdFUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVVuaXF1ZUlEIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVyJztcblxuY29uc3QgQXBpQ2FsbENvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5cbmV4cG9ydCBjb25zdCB1c2VBcGlDYWxsID0gKCkgPT4gdXNlQ29udGV4dChBcGlDYWxsQ29udGV4dCk7XG5cbmV4cG9ydCBjb25zdCBBcGlDYWxsUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBbbWFpbkRhdGEsIHNldE1haW5EYXRhXSA9IHVzZVN0YXRlKHtcbiAgICB0b3BDb21wYW55UHJvZmlsZToge1xuICAgICAgZGF0YTogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfSxcbiAgICBhbGxDb21wYW55UHJvZmlsZToge1xuICAgICAgZGF0YTogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfSxcbiAgICB0b3BKb2JQb3N0OiB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICB9LFxuICAgIGFsbEpvYlBvc3Q6IHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgIH0sXG4gICAgYWxsQ2hhbm5lbDoge1xuICAgICAgZGF0YTogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfSxcbiAgICB1c2VyOiB7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgIH0sXG4gICAgcHJvZmlsZToge1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICB9LFxuICAgIG5vdGlmaWNhdGlvbjoge1xuICAgICAgZGF0YTogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfSxcbiAgICBqb2JQb3N0OiB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICB9LFxuICAgIGNvbXBhbnlQcm9maWxlOiB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICB9LFxuICAgIHJlc3VtZToge1xuICAgICAgZGF0YTogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfSxcbiAgICBhcHBsaWNhdGlvbjoge1xuICAgICAgZGF0YTogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgcmVzZXREYXRhID0gKCkgPT4ge1xuICAgIHNldE1haW5EYXRhKHtcbiAgICAgIC4uLm1haW5EYXRhLFxuICAgICAgdXNlcjoge1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICB9LFxuICAgICAgcHJvZmlsZToge1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICB9LFxuICAgICAgbm90aWZpY2F0aW9uOiB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICB9LFxuICAgICAgam9iUG9zdDoge1xuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGNvbXBhbnlQcm9maWxlOiB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICB9LFxuICAgICAgcmVzdW1lOiB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICB9LFxuICAgICAgYXBwbGljYXRpb246IHtcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0VXNlckFwaSA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRVc2VyKCk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhPy51c2VyKSB7XG4gICAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICBkYXRhOiBkYXRhPy51c2VyLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRQcm9maWxlQXBpID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncHJvZmlsZScpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKClcbiAgICAgICAgLmVxKCd1c2VyX3V1aWQnLCBtYWluRGF0YS51c2VyLmRhdGE/LmlkKTtcblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVByb2ZpbGVBcGkgPSBhc3luYyAoeyBwb3N0RGF0YSB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdwcm9maWxlJylcbiAgICAgICAgLnVwZGF0ZSh7XG4gICAgICAgICAgdXNlcm5hbWU6IHBvc3REYXRhLnVzZXJuYW1lLFxuICAgICAgICAgIGZ1bGxfbmFtZTogcG9zdERhdGEuZnVsbF9uYW1lLFxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ3VzZXJfdXVpZCcsIG1haW5EYXRhLnVzZXIuZGF0YT8uaWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgdG9hc3Quc3VjY2VzcygnVXBkYXRlZCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlT25ib2FyZGluZ0FwaSA9IGFzeW5jICh7IHBvc3REYXRhIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2ZpbGUnKVxuICAgICAgICAudXBkYXRlKHtcbiAgICAgICAgICBvbmJvYXJkaW5nOiBwb3N0RGF0YS5vbmJvYXJkaW5nLFxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ3VzZXJfdXVpZCcsIG1haW5EYXRhLnVzZXIuZGF0YT8uaWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1cGRhdGVBY2NvdW50VHlwZUFwaSA9IGFzeW5jICh7IHBvc3REYXRhIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2ZpbGUnKVxuICAgICAgICAudXBkYXRlKHtcbiAgICAgICAgICBhY2NvdW50X3R5cGU6IHBvc3REYXRhLmFjY291bnRUeXBlLFxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ3VzZXJfdXVpZCcsIG1haW5EYXRhLnVzZXIuZGF0YT8uaWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1cGRhdGVQcm9kdWN0VG91ckFwaSA9IGFzeW5jICh7IHBvc3REYXRhIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2ZpbGUnKVxuICAgICAgICAudXBkYXRlKHtcbiAgICAgICAgICBwcm9kdWN0X3RvdXI6IHBvc3REYXRhLnByb2R1Y3RUb3VyLFxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ3VzZXJfdXVpZCcsIG1haW5EYXRhLnVzZXIuZGF0YT8uaWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXROb3RpZmljYXRpb25BcGkgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdub3RpZmljYXRpb24nKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLmVxKCd1c2VyX3V1aWQnLCBtYWluRGF0YS51c2VyLmRhdGE/LmlkKVxuICAgICAgICAub3JkZXIoJ2lkJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgIG5vdGlmaWNhdGlvbjoge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFkZE5vdGlmaWNhdGlvbkFwaSA9IGFzeW5jIChwb3N0RGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnbm90aWZpY2F0aW9uJylcbiAgICAgICAgLmluc2VydCh7XG4gICAgICAgICAgLi4ucG9zdERhdGEsXG4gICAgICAgICAgdXNlcl91dWlkOiBtYWluRGF0YS51c2VyLmRhdGE/LmlkLFxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1haW5EYXRhLm5vdGlmaWNhdGlvbi5kYXRhLnVuc2hpZnQoZGF0YSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1cGRhdGVOb3RpZmljYXRpb25BcGkgPSBhc3luYyAocG9zdERhdGEpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ25vdGlmaWNhdGlvbicpXG4gICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgIGlzX3JlYWQ6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICAgIC5lcSgnaWQnLCBwb3N0RGF0YT8uaWQpXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3VycmVudE5vdGlmaWNhdGlvbnMgPSBtYWluRGF0YS5ub3RpZmljYXRpb24uZGF0YTtcbiAgICAgIGlmIChjdXJyZW50Tm90aWZpY2F0aW9ucy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc3QgaW5kZXhUb1JlcGxhY2UgPSBjdXJyZW50Tm90aWZpY2F0aW9ucy5maW5kSW5kZXgoXG4gICAgICAgICAgKG9iaikgPT4gb2JqLmlkID09PSBkYXRhLmlkXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5ld05vdGlmaWNhdGlvbnMgPSBbXG4gICAgICAgICAgLi4uY3VycmVudE5vdGlmaWNhdGlvbnMuc2xpY2UoMCwgaW5kZXhUb1JlcGxhY2UpLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgLi4uY3VycmVudE5vdGlmaWNhdGlvbnMuc2xpY2UoaW5kZXhUb1JlcGxhY2UgKyAxKSxcbiAgICAgICAgXTtcblxuICAgICAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgICAgbm90aWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBkYXRhOiBuZXdOb3RpZmljYXRpb25zLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRKb2JQb3N0QXBpID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnam9iX3Bvc3QnKVxuICAgICAgICAuc2VsZWN0KFxuICAgICAgICAgICcqLCBqb2JfcG9zdF92YWxpZGl0eSAoKiksIGFwcGxpY2F0aW9uICgqLCByZXN1bWUgKCopKSwgam9iX3Bvc3RfY2hhbm5lbF9wb3N0ICgqKSdcbiAgICAgICAgKVxuICAgICAgICAuZXEoJ3VzZXJfdXVpZCcsIG1haW5EYXRhLnVzZXIuZGF0YT8uaWQpXG4gICAgICAgIC5vcmRlcignaWQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgam9iUG9zdDoge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFkZEpvYlBvc3RBcGkgPSBhc3luYyAocG9zdERhdGEpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2pvYl9wb3N0JylcbiAgICAgICAgLmluc2VydCh7XG4gICAgICAgICAgLi4ucG9zdERhdGEsXG4gICAgICAgICAgdXNlcl91dWlkOiBtYWluRGF0YS51c2VyLmRhdGE/LmlkLFxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1haW5EYXRhLmpvYlBvc3QuZGF0YS51bnNoaWZ0KGRhdGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGVkaXRKb2JQb3N0QXBpID0gYXN5bmMgKHsgcG9zdERhdGEsIGlkIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2pvYl9wb3N0JylcbiAgICAgICAgLnVwZGF0ZSh7XG4gICAgICAgICAgLi4ucG9zdERhdGEsXG4gICAgICAgIH0pXG4gICAgICAgIC5lcSgnaWQnLCBpZClcbiAgICAgICAgLnNlbGVjdChcbiAgICAgICAgICAnKiwgam9iX3Bvc3RfdmFsaWRpdHkgKCopLCBhcHBsaWNhdGlvbiAoKiwgcmVzdW1lICgqKSksIGpvYl9wb3N0X2NoYW5uZWxfcG9zdCAoKiknXG4gICAgICAgIClcbiAgICAgICAgLnNpbmdsZSgpO1xuXG4gICAgICBjb25zdCBjdXJyZW50RGF0YSA9IG1haW5EYXRhLmpvYlBvc3QuZGF0YTtcbiAgICAgIGNvbnN0IGluZGV4VG9SZXBsYWNlID0gY3VycmVudERhdGEuZmluZEluZGV4KChvYmopID0+IG9iai5pZCA9PT0gZGF0YS5pZCk7XG4gICAgICBjb25zdCBuZXdEYXRhID0gW1xuICAgICAgICAuLi5jdXJyZW50RGF0YS5zbGljZSgwLCBpbmRleFRvUmVwbGFjZSksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIC4uLmN1cnJlbnREYXRhLnNsaWNlKGluZGV4VG9SZXBsYWNlICsgMSksXG4gICAgICBdO1xuXG4gICAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAgIC4uLnByZXZEYXRhLFxuICAgICAgICBqb2JQb3N0OiB7XG4gICAgICAgICAgZGF0YTogbmV3RGF0YSxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRlbGV0ZUpvYlBvc3RBcGkgPSBhc3luYyAocG9zdERhdGEpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2pvYl9wb3N0JylcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICAgIC5lcSgnaWQnLCBwb3N0RGF0YS5pZClcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5zaW5nbGUoKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBjb25zdCBjdXJyZW50Sm9icyA9IG1haW5EYXRhLmpvYlBvc3QuZGF0YTtcbiAgICAgICAgY29uc3QgbmV3Sm9icyA9IGN1cnJlbnRKb2JzLmZpbHRlcigoam9iKSA9PiBqb2IuaWQgIT09IGRhdGEuaWQpO1xuXG4gICAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgICBqb2JQb3N0OiB7XG4gICAgICAgICAgICBkYXRhOiBuZXdKb2JzLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdG9hc3Quc3VjY2VzcygnRGVsZXRlZCEnKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBwdWJsaXNoSm9iUG9zdEFwaSA9IGFzeW5jIChwb3N0RGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2pvYi1wb3N0L3B1Ymxpc2gnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGlmIChyZXNwb25zZURhdGEpIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50RGF0YSA9IG1haW5EYXRhLmpvYlBvc3QuZGF0YTtcbiAgICAgICAgICBjb25zdCByZXR1cm5EYXRhID0gcmVzcG9uc2VEYXRhLmRhdGE7XG5cbiAgICAgICAgICBmdW5jdGlvbiBmaW5kQW5kUmVwbGFjZShkYXRhLCByZXR1cm5EYXRhKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGRhdGFbaV0uam9iX3Bvc3RfdmFsaWRpdHkgJiZcbiAgICAgICAgICAgICAgICBkYXRhW2ldLmpvYl9wb3N0X3ZhbGlkaXR5LmlkID09PSByZXR1cm5EYXRhLmlkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRhdGFbaV0uam9iX3Bvc3RfdmFsaWRpdHkgPSByZXR1cm5EYXRhO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdEYXRhID0gZmluZEFuZFJlcGxhY2UoY3VycmVudERhdGEsIHJldHVybkRhdGEpO1xuXG4gICAgICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgICAgICBqb2JQb3N0OiB7XG4gICAgICAgICAgICAgIGRhdGE6IG5ld0RhdGEsXG4gICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIHJldHVybiByZXNwb25zZURhdGE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHByb2Nlc3NpbmcgdGhlIHJlcXVlc3QnKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkQ2hhbm5lbFBvc3RBcGkgPSBhc3luYyAocG9zdERhdGEpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2pvYl9wb3N0X2NoYW5uZWxfcG9zdCcpXG4gICAgICAgIC5pbnNlcnQocG9zdERhdGEuY2hhbm5lbF9wb3N0KSAvLyBidWxrIGluc2VydCAoYXJyYXkpXG4gICAgICAgIC5zZWxlY3QoKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRlbGV0ZUNoYW5uZWxQb3N0QXBpID0gYXN5bmMgKHBvc3REYXRhKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGlkc1RvRGVsZXRlID0gcG9zdERhdGEuY2hhbm5lbF9wb3N0Lm1hcCgoaXRlbSkgPT4gaXRlbS5pZCk7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnam9iX3Bvc3RfY2hhbm5lbF9wb3N0JylcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICAgIC5lcSgnaWQnLCBpZHNUb0RlbGV0ZSk7IC8vIGJ1bGsgZGVsZXRlIChhcnJheSlcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRSZXN1bWVBcGkgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdyZXN1bWUnKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLmVxKCd1c2VyX3V1aWQnLCBtYWluRGF0YS51c2VyLmRhdGE/LmlkKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAgIC4uLnByZXZEYXRhLFxuICAgICAgICByZXN1bWU6IHtcbiAgICAgICAgICBkYXRhOiBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhWzBdIDogW10sXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFkZFJlc3VtZUFwaSA9IGFzeW5jICh7IHBvc3REYXRhIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IGRhdGFUb1VwZGF0ZSA9IHsgLi4ucG9zdERhdGEsIHVzZXJfdXVpZDogbWFpbkRhdGEudXNlci5kYXRhPy5pZCB9O1xuXG4gICAgICBpZiAoIXBvc3REYXRhLnVpZCkge1xuICAgICAgICBkYXRhVG9VcGRhdGUudWlkID0gZ2VuZXJhdGVVbmlxdWVJRCgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncmVzdW1lJylcbiAgICAgICAgLnVwc2VydChkYXRhVG9VcGRhdGUsIHsgb25Db25mbGljdDogJ3VzZXJfdXVpZCcgfSlcbiAgICAgICAgLnNlbGVjdCgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgIHJlc3VtZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEubGVuZ3RoID4gMCA/IGRhdGFbMF0gOiBbXSxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGdldENvbXBhbnlQcm9maWxlQXBpID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnY29tcGFueV9wcm9maWxlJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5lcSgndXNlcl91dWlkJywgbWFpbkRhdGEudXNlci5kYXRhPy5pZClcbiAgICAgICAgLm9yZGVyKCdpZCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAgIC4uLnByZXZEYXRhLFxuICAgICAgICBjb21wYW55UHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGFkZENvbXBhbnlQcm9maWxlQXBpID0gYXN5bmMgKHBvc3REYXRhKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjb21wYW55X3Byb2ZpbGUnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICAuLi5wb3N0RGF0YSxcbiAgICAgICAgICB1aWQ6IGdlbmVyYXRlVW5pcXVlSUQoKSxcbiAgICAgICAgICB1c2VyX3V1aWQ6IG1haW5EYXRhLnVzZXIuZGF0YT8uaWQsXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWFpbkRhdGEuY29tcGFueVByb2ZpbGUuZGF0YS51bnNoaWZ0KGRhdGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGVkaXRDb21wYW55UHJvZmlsZUFwaSA9IGFzeW5jICh7IHBvc3REYXRhLCBpZCB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjb21wYW55X3Byb2ZpbGUnKVxuICAgICAgICAudXBkYXRlKHtcbiAgICAgICAgICAuLi5wb3N0RGF0YSxcbiAgICAgICAgfSlcbiAgICAgICAgLmVxKCdpZCcsIGlkKVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1cnJlbnREYXRhID0gbWFpbkRhdGEuY29tcGFueVByb2ZpbGUuZGF0YTtcbiAgICAgIGNvbnN0IGluZGV4VG9SZXBsYWNlID0gY3VycmVudERhdGEuZmluZEluZGV4KChvYmopID0+IG9iai5pZCA9PT0gZGF0YS5pZCk7XG4gICAgICBjb25zdCBuZXdEYXRhID0gW1xuICAgICAgICAuLi5jdXJyZW50RGF0YS5zbGljZSgwLCBpbmRleFRvUmVwbGFjZSksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIC4uLmN1cnJlbnREYXRhLnNsaWNlKGluZGV4VG9SZXBsYWNlICsgMSksXG4gICAgICBdO1xuXG4gICAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAgIC4uLnByZXZEYXRhLFxuICAgICAgICBjb21wYW55UHJvZmlsZToge1xuICAgICAgICAgIGRhdGE6IG5ld0RhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBkZWxldGVDb21wYW55UHJvZmlsZUFwaSA9IGFzeW5jIChwb3N0RGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnY29tcGFueV9wcm9maWxlJylcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICAgIC5lcSgnaWQnLCBwb3N0RGF0YS5pZClcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5zaW5nbGUoKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBjb25zdCBjdXJyZW50RGF0YSA9IG1haW5EYXRhLmNvbXBhbnlQcm9maWxlLmRhdGE7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBjdXJyZW50RGF0YS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaWQgIT09IGRhdGEuaWQpO1xuXG4gICAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgICBjb21wYW55UHJvZmlsZToge1xuICAgICAgICAgICAgZGF0YTogbmV3RGF0YSxcbiAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRvYXN0LnN1Y2Nlc3MoJ0RlbGV0ZWQhJyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0QXBwbGljYXRpb25BcGkgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdhcHBsaWNhdGlvbicpXG4gICAgICAgIC5zZWxlY3QoJyosIGpvYl9wb3N0ICgqLCBjb21wYW55X3Byb2ZpbGUgKCopKScpXG4gICAgICAgIC5lcSgndXNlcl91dWlkJywgbWFpbkRhdGEudXNlci5kYXRhPy5pZCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgYXBwbGljYXRpb246IHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhcHBseUpvYlBvc3RBcGkgPSBhc3luYyAoeyBwb3N0RGF0YSB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdhcHBsaWNhdGlvbicpXG4gICAgICAgIC5zZWxlY3QoJyosIGpvYl9wb3N0ICgqLCBjb21wYW55X3Byb2ZpbGUgKCopKScpXG4gICAgICAgIC5lcSgnam9iX3Bvc3RfaWQnLCBwb3N0RGF0YS5qb2JfcG9zdF9pZClcbiAgICAgICAgLmVxKCd1c2VyX3V1aWQnLCBtYWluRGF0YS51c2VyLmRhdGE/LmlkKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPT0gMCkge1xuICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgIC5mcm9tKCdhcHBsaWNhdGlvbicpXG4gICAgICAgICAgLmluc2VydCh7IC4uLnBvc3REYXRhLCB1c2VyX3V1aWQ6IG1haW5EYXRhLnVzZXIuZGF0YT8uaWQgfSlcbiAgICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgICAuc2luZ2xlKCk7XG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIG1haW5EYXRhLmFwcGxpY2F0aW9uLmRhdGEudW5zaGlmdChkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRvYXN0LmVycm9yKCdBcHBsaWNhdGlvbiBhbHJlYWR5IHN1Ym1pdHRlZCEnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGVkaXRBcHBsaWNhdGlvbkFwaSA9IGFzeW5jICh7IHBvc3REYXRhLCBpZCB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdhcHBsaWNhdGlvbicpXG4gICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgIC4uLnBvc3REYXRhLFxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ2lkJywgaWQpXG4gICAgICAgIC5zZWxlY3QoKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YS5sZW5ndGggPiAwID8gZGF0YVswXSA6IFtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0VG9wSm9iUG9zdEFwaSA9IGFzeW5jICh7IGxpbWl0OiBsaW1pdCB9KSA9PiB7XG4gICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgLi4ucHJldkRhdGEsXG4gICAgICB0b3BKb2JQb3N0OiB7XG4gICAgICAgIC4uLnByZXZEYXRhLnRvcEpvYlBvc3QsXG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSkpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdqb2JfcG9zdCcpXG4gICAgICAgIC5zZWxlY3QoJyosIGpvYl9wb3N0X3ZhbGlkaXR5IWlubmVyKCopLCBjb21wYW55X3Byb2ZpbGUgKCopJylcbiAgICAgICAgLmVxKCdqb2JfcG9zdF92YWxpZGl0eS5pc19wdWJsaXNoZWQnLCB0cnVlKVxuICAgICAgICAub3JkZXIoJ2lkJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAobGltaXQpIHtcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5saW1pdChsaW1pdCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHF1ZXJ5O1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgIHRvcEpvYlBvc3Q6IHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgdG9wSm9iUG9zdDoge1xuICAgICAgICAgIC4uLnByZXZEYXRhLnRvcEpvYlBvc3QsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0QWxsSm9iUG9zdEFwaSA9IGFzeW5jICh7XG4gICAgam9iRmlsdGVyOiBqb2JGaWx0ZXIsXG4gICAgZnJvbTogZnJvbSxcbiAgICB0bzogdG8sXG4gIH0pID0+IHtcbiAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAuLi5wcmV2RGF0YSxcbiAgICAgIGFsbEpvYlBvc3Q6IHtcbiAgICAgICAgLi4ucHJldkRhdGEuYWxsSm9iUG9zdCxcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KSk7XG5cbiAgICB0cnkge1xuICAgICAgbGV0IHF1ZXJ5ID0gc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2pvYl9wb3N0JylcbiAgICAgICAgLnNlbGVjdCgnKiwgam9iX3Bvc3RfdmFsaWRpdHkhaW5uZXIoKiksIGNvbXBhbnlfcHJvZmlsZSAoKiknKVxuICAgICAgICAuZXEoJ2pvYl9wb3N0X3ZhbGlkaXR5LmlzX3B1Ymxpc2hlZCcsIHRydWUpXG4gICAgICAgIC5yYW5nZShmcm9tLCB0bylcbiAgICAgICAgLm9yZGVyKCdpZCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICAgICAgaWYgKGpvYkZpbHRlcj8ua2V5d29yZCkge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnRleHRTZWFyY2goJ3N1bW1hcnknLCBqb2JGaWx0ZXIua2V5d29yZCwge1xuICAgICAgICAgIHR5cGU6ICd3ZWJzZWFyY2gnLFxuICAgICAgICAgIGNvbmZpZzogJ2VuZ2xpc2gnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGpvYkZpbHRlcj8udHlwZSkge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdlbXBsb3ltZW50X3R5cGUnLCBqb2JGaWx0ZXIudHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChqb2JGaWx0ZXI/Lm1pblNhbGFyeSkge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5Lmd0ZSgnbWluX3NhbGFyeScsIGpvYkZpbHRlci5taW5TYWxhcnkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoam9iRmlsdGVyPy5tYXhTYWxhcnkpIHtcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5sdGUoJ21heF9zYWxhcnknLCBqb2JGaWx0ZXIubWF4U2FsYXJ5KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgcXVlcnk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgYWxsSm9iUG9zdDoge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgYWxsSm9iUG9zdDoge1xuICAgICAgICAgIC4uLnByZXZEYXRhLmFsbEpvYlBvc3QsXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0Sm9iRGV0YWlsc0FwaSA9IGFzeW5jIChwb3N0RGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnam9iX3Bvc3QnKVxuICAgICAgICAuc2VsZWN0KCcqLCBqb2JfcG9zdF92YWxpZGl0eSFpbm5lcigqKSwgY29tcGFueV9wcm9maWxlICgqKScpXG4gICAgICAgIC5lcSgnam9iX3Bvc3RfdmFsaWRpdHkuaXNfcHVibGlzaGVkJywgdHJ1ZSlcbiAgICAgICAgLmVxKCd1aWQnLCBwb3N0RGF0YS5qb2JfdWlkKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YS5sZW5ndGggPiAwID8gZGF0YVswXSA6IFtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0UmVzdW1lRGV0YWlsc0FwaSA9IGFzeW5jIChwb3N0RGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncmVzdW1lJylcbiAgICAgICAgLnNlbGVjdCgnKiwgcHJvZmlsZSAodXNlcm5hbWUpJylcbiAgICAgICAgLmVxKCd1aWQnLCBwb3N0RGF0YS51aWQpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhWzBdIDogbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGdldFNpbmdsZUNvbXBhbnlQcm9maWxlQXBpID0gYXN5bmMgKHBvc3REYXRhKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjb21wYW55X3Byb2ZpbGUnKVxuICAgICAgICAuc2VsZWN0KFxuICAgICAgICAgICcqLCBqb2JfcG9zdCgqLCAgam9iX3Bvc3RfdmFsaWRpdHkhaW5uZXIoKiksIGNvbXBhbnlfcHJvZmlsZSAoKikpJ1xuICAgICAgICApXG4gICAgICAgIC5lcSgndWlkJywgcG9zdERhdGEudWlkKVxuICAgICAgICAuZXEoJ2pvYl9wb3N0LmpvYl9wb3N0X3ZhbGlkaXR5LmlzX3B1Ymxpc2hlZCcsIHRydWUpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhWzBdIDogbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVBhc3N3b3JkQXBpID0gYXN5bmMgKHsgcG9zdERhdGEgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnVwZGF0ZVVzZXIoe1xuICAgICAgICBwYXNzd29yZDogcG9zdERhdGEubmV3X3Bhc3N3b3JkLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgdG9hc3Quc3VjY2VzcygnUGFzc3dvcmQgY2hhbmdlZCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGVsZXRlQWNjb3VudEFwaSA9IGFzeW5jIChwb3N0RGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnYWNjb3VudF9kZWxldGlvbicpXG4gICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgIC4uLnBvc3REYXRhLFxuICAgICAgICAgIHVzZXJfdXVpZDogbWFpbkRhdGEudXNlci5kYXRhPy5pZCxcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdCgpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHRvYXN0LnN1Y2Nlc3MoJ0FjY291bnQgZGVsZXRlZCEnKTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRBbGxDaGFubmVsQXBpID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnY2hhbm5lbCcpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAuZXEoJ2lzX2FjdGl2ZScsIHRydWUpXG4gICAgICAgIC5vcmRlcignaWQnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICBzZXRNYWluRGF0YSgocHJldkRhdGEpID0+ICh7XG4gICAgICAgIC4uLnByZXZEYXRhLFxuICAgICAgICBhbGxDaGFubmVsOiB7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0VG9wQ29tcGFueUFwaSA9IGFzeW5jICh7IGxpbWl0OiBsaW1pdCB9KSA9PiB7XG4gICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgLi4ucHJldkRhdGEsXG4gICAgICB0b3BDb21wYW55UHJvZmlsZToge1xuICAgICAgICAuLi5wcmV2RGF0YS50b3BDb21wYW55UHJvZmlsZSxcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KSk7XG5cbiAgICB0cnkge1xuICAgICAgbGV0IHF1ZXJ5ID0gc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2NvbXBhbnlfcHJvZmlsZScpXG4gICAgICAgIC5zZWxlY3QoJyosIGpvYl9wb3N0ICgqKScpXG4gICAgICAgIC5vcmRlcignaWQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XG5cbiAgICAgIGlmIChsaW1pdCkge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmxpbWl0KGxpbWl0KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgcXVlcnk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgdG9wQ29tcGFueVByb2ZpbGU6IHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2V0TWFpbkRhdGEoKHByZXZEYXRhKSA9PiAoe1xuICAgICAgICAuLi5wcmV2RGF0YSxcbiAgICAgICAgdG9wQ29tcGFueVByb2ZpbGU6IHtcbiAgICAgICAgICAuLi5wcmV2RGF0YS50b3BDb21wYW55UHJvZmlsZSxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRBbGxDb21wYW55QXBpID0gYXN5bmMgKGxpbWl0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdjb21wYW55X3Byb2ZpbGUnKVxuICAgICAgICAuc2VsZWN0KCcqLCBqb2JfcG9zdCAoKiknKVxuICAgICAgICAub3JkZXIoJ2lkJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAobGltaXQpIHtcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5saW1pdChsaW1pdCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHF1ZXJ5O1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHNldE1haW5EYXRhKChwcmV2RGF0YSkgPT4gKHtcbiAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgIGFsbENvbXBhbnlQcm9maWxlOiB7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcHJvbWlzZUFsbEFwaSA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBnZXRQcm9maWxlQXBpKCksXG4gICAgICBnZXROb3RpZmljYXRpb25BcGkoKSxcbiAgICAgIGdldEpvYlBvc3RBcGkoKSxcbiAgICAgIGdldFJlc3VtZUFwaSgpLFxuICAgICAgZ2V0Q29tcGFueVByb2ZpbGVBcGkoKSxcbiAgICAgIGdldEFwcGxpY2F0aW9uQXBpKCksXG4gICAgXSk7XG4gIH07XG5cbiAgY29uc3QgcHJvbWlzZUFsbFB1YmxpY0FwaSA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBnZXRUb3BKb2JQb3N0QXBpKHtcbiAgICAgICAgbGltaXQ6IDMsXG4gICAgICB9KSxcbiAgICAgIGdldFRvcENvbXBhbnlBcGkoe1xuICAgICAgICBsaW1pdDogMyxcbiAgICAgIH0pLFxuICAgICAgZ2V0QWxsQ29tcGFueUFwaSgpLFxuICAgICAgZ2V0QWxsQ2hhbm5lbEFwaSgpLFxuICAgIF0pO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaW5uaXRpYWxGZXRjaCA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChtYWluRGF0YS51c2VyLmRhdGEgPT0gbnVsbCkge1xuICAgICAgICBjb25zdCB1c2VyRGF0YSA9IGF3YWl0IGdldFVzZXJBcGkoKTtcbiAgICAgICAgaWYgKCF1c2VyRGF0YSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdQbGVhc2UgbG9naW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpbm5pdGlhbEZldGNoKCk7XG4gIH0sIFtyb3V0ZXIucGF0aG5hbWVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb21pc2VBbGxQdWJsaWNBcGkoKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1haW5EYXRhLnVzZXIuZGF0YSAhPT0gbnVsbCkge1xuICAgICAgcHJvbWlzZUFsbEFwaSgpO1xuICAgIH1cbiAgfSwgW21haW5EYXRhLnVzZXIuZGF0YV0pO1xuXG4gIGNvbnN0IGxvZ2luQXBpID0gYXN5bmMgKHsgZW1haWwsIHBhc3N3b3JkIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduSW5XaXRoUGFzc3dvcmQoe1xuICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09ICdFbWFpbCBub3QgY29uZmlybWVkJykge1xuICAgICAgICAgIHRvYXN0LmVycm9yKFxuICAgICAgICAgICAgJ1lvdXIgZW1haWwgY29uZmlybWF0aW9uIGlzIHBlbmRpbmcsIHBsZWFzZSBjaGVjayB5b3VyIGluYm94IGZvciB0aGUgY29uZmlybWF0aW9uIGxpbmsuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE/LnVzZXI7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRvYXN0LmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzaWduVXBBcGkgPSBhc3luYyAoeyB1c2VybmFtZSwgZW1haWwsIHBhc3N3b3JkIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduVXAoe1xuICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGVtYWlsUmVkaXJlY3RUbzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX1JFRElSRUNUX1VSTCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBkYXRhLnVzZXIgJiZcbiAgICAgICAgZGF0YS51c2VyLmlkZW50aXRpZXMgJiZcbiAgICAgICAgZGF0YS51c2VyLmlkZW50aXRpZXMubGVuZ3RoID09PSAwXG4gICAgICApIHtcbiAgICAgICAgdG9hc3QuZXJyb3IoJ1VzZXIgYWxyZWFkeSBleGlzdHMhJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9hc3Quc3VjY2VzcyhcbiAgICAgICAgJ1RoYW5rcyBmb3Igc2lnbmluZyB1cCEgcGxlYXNlIGNoZWNrIHlvdXIgZW1haWwgdG8gY29tcGxldGUgeW91ciByZWdpc3RyYXRpb24uJyxcbiAgICAgICAge1xuICAgICAgICAgIGR1cmF0aW9uOiA2MDAwLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVzZXRQYXNzd29yZEFwaSA9IGFzeW5jICh7IGN1cnJlbnRFbWFpbCB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGgucmVzZXRQYXNzd29yZEZvckVtYWlsKFxuICAgICAgICBjdXJyZW50RW1haWwsXG4gICAgICAgIHtcbiAgICAgICAgICByZWRpcmVjdFRvOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19VUERBVEVfUEFTU1dPUkRfUkVESVJFQ1RfVVJMLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0b2FzdC5lcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgbG9nb3V0QXBpID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvYXN0LnN1Y2Nlc3MoJ1lvdSBoYXZlIGJlZW4gbG9nZ2VkIG91dC4nKTtcbiAgICAgIHJvdXRlci5wdXNoKFBBR0VTLmhvbWUuZGlyZWN0b3J5KTtcbiAgICAgIHJlc2V0RGF0YSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjbGVhckRhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgcm91dGVyLnB1c2goUEFHRVMuaG9tZS5kaXJlY3RvcnkpO1xuICAgIHJlc2V0RGF0YSgpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEFwaUNhbGxDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17e1xuICAgICAgICBhcGlEYXRhOiBtYWluRGF0YSxcbiAgICAgICAgY2xlYXJEYXRhLFxuICAgICAgICBsb2dpbkFwaSxcbiAgICAgICAgc2lnblVwQXBpLFxuICAgICAgICByZXNldFBhc3N3b3JkQXBpLFxuICAgICAgICBsb2dvdXRBcGksXG4gICAgICAgIGdldFRvcEpvYlBvc3RBcGksXG4gICAgICAgIGdldFRvcENvbXBhbnlBcGksXG4gICAgICAgIGdldEFsbEpvYlBvc3RBcGksXG4gICAgICAgIGdldFByb2ZpbGVBcGksXG4gICAgICAgIGFkZE5vdGlmaWNhdGlvbkFwaSxcbiAgICAgICAgdXBkYXRlTm90aWZpY2F0aW9uQXBpLFxuICAgICAgICBnZXRKb2JQb3N0QXBpLFxuICAgICAgICBhZGRKb2JQb3N0QXBpLFxuICAgICAgICBlZGl0Sm9iUG9zdEFwaSxcbiAgICAgICAgZGVsZXRlSm9iUG9zdEFwaSxcbiAgICAgICAgcHVibGlzaEpvYlBvc3RBcGksXG4gICAgICAgIGFwcGx5Sm9iUG9zdEFwaSxcbiAgICAgICAgYWRkQ2hhbm5lbFBvc3RBcGksXG4gICAgICAgIGRlbGV0ZUNoYW5uZWxQb3N0QXBpLFxuICAgICAgICBnZXRDb21wYW55UHJvZmlsZUFwaSxcbiAgICAgICAgYWRkQ29tcGFueVByb2ZpbGVBcGksXG4gICAgICAgIGVkaXRDb21wYW55UHJvZmlsZUFwaSxcbiAgICAgICAgZGVsZXRlQ29tcGFueVByb2ZpbGVBcGksXG4gICAgICAgIGVkaXRBcHBsaWNhdGlvbkFwaSxcbiAgICAgICAgZ2V0Sm9iRGV0YWlsc0FwaSxcbiAgICAgICAgZ2V0UmVzdW1lRGV0YWlsc0FwaSxcbiAgICAgICAgZ2V0U2luZ2xlQ29tcGFueVByb2ZpbGVBcGksXG4gICAgICAgIHVwZGF0ZVBhc3N3b3JkQXBpLFxuICAgICAgICBkZWxldGVBY2NvdW50QXBpLFxuICAgICAgICBnZXRSZXN1bWVBcGksXG4gICAgICAgIGFkZFJlc3VtZUFwaSxcbiAgICAgICAgc2V0TWFpbkRhdGEsXG4gICAgICAgIHVwZGF0ZVByb2ZpbGVBcGksXG4gICAgICAgIHVwZGF0ZUFjY291bnRUeXBlQXBpLFxuICAgICAgICB1cGRhdGVPbmJvYXJkaW5nQXBpLFxuICAgICAgICB1cGRhdGVQcm9kdWN0VG91ckFwaSxcbiAgICAgICAgZ2V0QXBwbGljYXRpb25BcGksXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0FwaUNhbGxDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ0b2FzdCIsInVzZUVmZmVjdCIsInN1cGFiYXNlIiwidXNlUm91dGVyIiwiUEFHRVMiLCJnZW5lcmF0ZVVuaXF1ZUlEIiwiQXBpQ2FsbENvbnRleHQiLCJ1c2VBcGlDYWxsIiwiQXBpQ2FsbFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJyb3V0ZXIiLCJtYWluRGF0YSIsInNldE1haW5EYXRhIiwidG9wQ29tcGFueVByb2ZpbGUiLCJkYXRhIiwiaXNMb2FkaW5nIiwiYWxsQ29tcGFueVByb2ZpbGUiLCJ0b3BKb2JQb3N0IiwiYWxsSm9iUG9zdCIsImFsbENoYW5uZWwiLCJ1c2VyIiwicHJvZmlsZSIsIm5vdGlmaWNhdGlvbiIsImpvYlBvc3QiLCJjb21wYW55UHJvZmlsZSIsInJlc3VtZSIsImFwcGxpY2F0aW9uIiwicmVzZXREYXRhIiwiZ2V0VXNlckFwaSIsImVycm9yIiwiYXV0aCIsImdldFVzZXIiLCJwcmV2RGF0YSIsImNvbnNvbGUiLCJnZXRQcm9maWxlQXBpIiwiZnJvbSIsInNlbGVjdCIsInNpbmdsZSIsImVxIiwiaWQiLCJ1cGRhdGVQcm9maWxlQXBpIiwicG9zdERhdGEiLCJ1cGRhdGUiLCJ1c2VybmFtZSIsImZ1bGxfbmFtZSIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwidXBkYXRlT25ib2FyZGluZ0FwaSIsIm9uYm9hcmRpbmciLCJ1cGRhdGVBY2NvdW50VHlwZUFwaSIsImFjY291bnRfdHlwZSIsImFjY291bnRUeXBlIiwidXBkYXRlUHJvZHVjdFRvdXJBcGkiLCJwcm9kdWN0X3RvdXIiLCJwcm9kdWN0VG91ciIsImdldE5vdGlmaWNhdGlvbkFwaSIsIm9yZGVyIiwiYXNjZW5kaW5nIiwiYWRkTm90aWZpY2F0aW9uQXBpIiwiaW5zZXJ0IiwidXNlcl91dWlkIiwidW5zaGlmdCIsInVwZGF0ZU5vdGlmaWNhdGlvbkFwaSIsImlzX3JlYWQiLCJjdXJyZW50Tm90aWZpY2F0aW9ucyIsImxlbmd0aCIsImluZGV4VG9SZXBsYWNlIiwiZmluZEluZGV4Iiwib2JqIiwibmV3Tm90aWZpY2F0aW9ucyIsInNsaWNlIiwiZ2V0Sm9iUG9zdEFwaSIsImFkZEpvYlBvc3RBcGkiLCJlZGl0Sm9iUG9zdEFwaSIsImN1cnJlbnREYXRhIiwibmV3RGF0YSIsImRlbGV0ZUpvYlBvc3RBcGkiLCJkZWxldGUiLCJjdXJyZW50Sm9icyIsIm5ld0pvYnMiLCJmaWx0ZXIiLCJqb2IiLCJwdWJsaXNoSm9iUG9zdEFwaSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvayIsInJlc3BvbnNlRGF0YSIsImpzb24iLCJyZXR1cm5EYXRhIiwiZmluZEFuZFJlcGxhY2UiLCJpIiwiam9iX3Bvc3RfdmFsaWRpdHkiLCJhZGRDaGFubmVsUG9zdEFwaSIsImNoYW5uZWxfcG9zdCIsImRlbGV0ZUNoYW5uZWxQb3N0QXBpIiwiaWRzVG9EZWxldGUiLCJtYXAiLCJpdGVtIiwiZ2V0UmVzdW1lQXBpIiwiYWRkUmVzdW1lQXBpIiwiZGF0YVRvVXBkYXRlIiwidWlkIiwidXBzZXJ0Iiwib25Db25mbGljdCIsImdldENvbXBhbnlQcm9maWxlQXBpIiwiYWRkQ29tcGFueVByb2ZpbGVBcGkiLCJlZGl0Q29tcGFueVByb2ZpbGVBcGkiLCJkZWxldGVDb21wYW55UHJvZmlsZUFwaSIsImdldEFwcGxpY2F0aW9uQXBpIiwiYXBwbHlKb2JQb3N0QXBpIiwiam9iX3Bvc3RfaWQiLCJlZGl0QXBwbGljYXRpb25BcGkiLCJnZXRUb3BKb2JQb3N0QXBpIiwibGltaXQiLCJxdWVyeSIsImdldEFsbEpvYlBvc3RBcGkiLCJqb2JGaWx0ZXIiLCJ0byIsInJhbmdlIiwia2V5d29yZCIsInRleHRTZWFyY2giLCJ0eXBlIiwiY29uZmlnIiwibWluU2FsYXJ5IiwiZ3RlIiwibWF4U2FsYXJ5IiwibHRlIiwiZ2V0Sm9iRGV0YWlsc0FwaSIsImpvYl91aWQiLCJnZXRSZXN1bWVEZXRhaWxzQXBpIiwiZ2V0U2luZ2xlQ29tcGFueVByb2ZpbGVBcGkiLCJ1cGRhdGVQYXNzd29yZEFwaSIsInVwZGF0ZVVzZXIiLCJwYXNzd29yZCIsIm5ld19wYXNzd29yZCIsImRlbGV0ZUFjY291bnRBcGkiLCJnZXRBbGxDaGFubmVsQXBpIiwiZ2V0VG9wQ29tcGFueUFwaSIsImdldEFsbENvbXBhbnlBcGkiLCJwcm9taXNlQWxsQXBpIiwiUHJvbWlzZSIsImFsbCIsInByb21pc2VBbGxQdWJsaWNBcGkiLCJpbm5pdGlhbEZldGNoIiwidXNlckRhdGEiLCJsb2ciLCJwYXRobmFtZSIsImxvZ2luQXBpIiwiZW1haWwiLCJzaWduSW5XaXRoUGFzc3dvcmQiLCJzaWduVXBBcGkiLCJzaWduVXAiLCJvcHRpb25zIiwiZW1haWxSZWRpcmVjdFRvIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0dPT0dMRV9SRURJUkVDVF9VUkwiLCJuYW1lIiwiaWRlbnRpdGllcyIsImR1cmF0aW9uIiwicmVzZXRQYXNzd29yZEFwaSIsImN1cnJlbnRFbWFpbCIsInJlc2V0UGFzc3dvcmRGb3JFbWFpbCIsInJlZGlyZWN0VG8iLCJORVhUX1BVQkxJQ19VUERBVEVfUEFTU1dPUkRfUkVESVJFQ1RfVVJMIiwibG9nb3V0QXBpIiwic2lnbk91dCIsInB1c2giLCJob21lIiwiZGlyZWN0b3J5IiwiY2xlYXJEYXRhIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImFwaURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./context/apiCall.js\n"));

/***/ })

});